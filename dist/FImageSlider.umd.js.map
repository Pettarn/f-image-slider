{"version":3,"file":"FImageSlider.umd.js","sources":["../src/components/Swiper.vue","../src/components/SwiperItem.vue","../src/lib/index.js"],"sourcesContent":["<template>\n  <div class=\"swiper\">\n    <div\n      @touchstart=\"touchstart\"\n      @touchmove=\"touchmove\"\n      @touchend=\"touchend\"\n      class=\"viewport\"\n      data-power\n    >\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: {\n      type: String,\n      default: \"\"\n    },\n    autoplay: {\n      type: Boolean,\n      default: false\n    },\n    timeout: {\n      type: Number,\n      default: 2000\n    }\n  },\n  data() {\n    return {\n      currentSelected: \"\",\n      names: [],\n      length: null,\n      timer: null,\n      target: {\n        left: null,\n        self: null,\n        right: null\n      },\n      targetDom: null,\n      viewportWidth: null,\n      touch: {\n        x1: null,\n        x2: null\n      },\n      accDistance: 0,\n      totalDiff: 0\n    };\n  },\n  computed: {\n    // accDistance() {\n    //   return (\n    //     this.targetDom.getBoundingClientRect().left -\n    //     this.targetDom.offsetParent.getBoundingClientRect().left\n    //   );\n    // }\n  },\n  mounted() {\n    let viewport = document.getElementsByClassName(\"viewport\")[0];\n    this.viewportWidth = viewport.clientWidth;\n    let __this = this;\n    window.onresize = function() {\n      __this.viewportWidth = viewport.clientWidth;\n    };\n    this.showChild();\n    this.$children.forEach(child => {\n      this.names.push(child.name);\n    });\n    this.length = this.names.length;\n    if (this.autoplay) {\n      this.run();\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  watch: {\n    value() {\n      this.showChild();\n    }\n  },\n  methods: {\n    showChild() {\n      this.currentSelected = this.value || this.$children[0].name;\n      this.$children.forEach(vm => {\n        vm.selected = this.currentSelected;\n      });\n    },\n    run() {\n      this.timer = setInterval(() => {\n        let curIndex = this.names.indexOf(this.currentSelected);\n        let newIndex = (curIndex + 1) % this.length;\n        this.$children.forEach(vm => {\n          vm.direction = \"left\";\n          if (vm.name === 'item2') {\n              console.log(vm.fromSup)\n          }\n        });\n        this.$emit(\"input\", this.names[newIndex]);\n      }, this.timeout);\n    },\n    touchstart(e) {\n      if (e.target.children.length) {\n        return;\n      }\n      clearInterval(this.timer);\n      this.timer = null;\n      this.targetDom = e.targetTouches[0].target;\n      //   this.accDistance =\n      //     this.targetDom.getBoundingClientRect().left -\n      //     this.targetDom.offsetParent.getBoundingClientRect().left;\n      this.touch.x1 = e.targetTouches[0].clientX;\n      let currentIndex = this.names.indexOf(this.currentSelected);\n      let right = (currentIndex + 1 + this.length) % this.length;\n      let left = (currentIndex - 1 + this.length) % this.length;\n      this.$children.forEach(vm => {\n        let vmIndex = this.names.indexOf(vm.name);\n        if (vmIndex === right || vmIndex === left || vmIndex === currentIndex) {\n          if (vmIndex === right) {\n            vm.direction = \"\";\n            vm.flag = true;\n            this.target.right = vm;\n          } else if (vmIndex === left) {\n            vm.direction = \"\";\n            vm.flag = true;\n            this.target.left = vm;\n          } else if (vmIndex === currentIndex) {\n            vm.direction = \"\";\n            vm.flag = true;\n            this.target.self = vm;\n          }\n        }\n      });\n      this.translate(this.targetDom, 0);\n    },\n    touchmove(e) {\n      if (this.targetDom == null) {\n        return;\n      }\n      this.touch.x2 = e.targetTouches[0].clientX;\n      this.totalDiff = this.touch.x2 - this.touch.x1;\n\n      //   this.translate(this.targetDom, this.totalDiff + this.accDistance);\n      this.translate(this.targetDom, this.totalDiff);\n    },\n    touchend(e) {\n      //   console.log(parseInt(getComputedStyle(this.targetDom).left));\n      //   console.log(this.accDistance)\n      //   console.log(this.viewportWidth);\n      if (this.targetDom == null) {\n        return;\n      }\n      if (this.totalDiff > this.viewportWidth / 2) {\n        this.translate(\n          this.targetDom,\n          this.viewportWidth,\n          // this.viewportWidth,\n          (this.viewportWidth - this.totalDiff) / this.viewportWidth,\n          false\n        );\n        // this.target.left.direction = \"right\";\n        this.$emit(\"input\", this.target.left.name);\n      } else if (-this.totalDiff > this.viewportWidth / 2) {\n        this.translate(\n          this.targetDom,\n          -this.viewportWidth + this.totalDiff,\n          (this.viewportWidth + this.totalDiff) / this.viewportWidth,\n          false\n        );\n        // this.target.right.direction = \"left\";\n        this.$emit(\"input\", this.target.right.name);\n      } else {\n        this.translate(\n          this.targetDom,\n          0,\n          (this.totalDiff > 0 ? this.totalDiff : -this.totalDiff) /\n            this.viewportWidth,\n          false\n        );\n        // this.$emit(\"input\", this.target.self.name);\n        this.target.self.direction = \"onlyleft\";\n        console.log(this.currentSelected)\n      }\n    },\n    translate(elem, diff, durationTime, flag) {\n      let name = this.target.self.name;\n      let __this = this;\n      setTimeout(() => {\n        if (flag === false) {\n          __this.target.self.flag = __this.target.left.flag = __this.target.right.flag = flag;\n          __this.target.self.fromSup = __this.target.left.fromSup = __this.target.right.fromSup = {}\n          __this.target.self.zIndex = 0;\n          __this.target.self.direction = __this.target.left.direction = __this.target.right.direction =\n            \"left\";\n          this.touch.x1 = this.touch.x2 = this.totalDiff = null;\n          //   this.target.left.direction = this.target.self.direction = this.target.right.direction = 'left'\n          this.targetDom = null;\n          //   this.target.left = this.target.right = this.target.self = null\n\n          if (!this.timer) {\n            this.run();\n          }\n        }\n      }, durationTime * 300);\n      let viewportWidth = this.viewportWidth;\n      diff = diff > viewportWidth ? viewportWidth : diff;\n      diff = -diff > viewportWidth ? -viewportWidth : diff;\n      this.target.left.fromSup = {\n        left: diff - this.viewportWidth + \"px\",\n        transitionProperty: \"left\",\n        transitionDuration: (durationTime || 0) * 0.3 + \"s\"\n      };\n      this.target.right.fromSup = {\n        left: diff + this.viewportWidth + \"px\",\n        transitionProperty: \"left\",\n        transitionDuration: (durationTime || 0) * 0.3 + \"s\"\n      };\n      elem.style.left = diff + \"px\";\n      elem.style.zIndex = 1;\n      elem.style.transitionProperty = \"left\";\n      elem.style.transitionDuration = (durationTime || 0) * 0.3 + \"s\";\n    }\n  }\n};\n</script>\n\n<style scoped>\n.viewport {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  /* overflow: hidden; */\n}\n\n.dot {\n  position: absolute;\n  left: 50%;\n  top: 100%;\n  transform: translateX(-50%);\n}\n.dot-item {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  border: 1px solid red;\n  background-color: green;\n}\n</style>\n","<template>\n  <transition :name=\"direction\">\n    <div class=\"swiper-item\" v-if=\"isShow\" :style=\"fromSup\">\n      <slot></slot>\n    </div>\n  </transition>\n</template>\n\n<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  computed: {\n    isShow() {\n      return this.selected === this.name || this.flag;\n    }\n  },\n  data() {\n    return {\n      selected: \"\",\n      direction: \"onlyleave\",\n      flag: false,\n      fromSup: {\n\n      }\n    };\n  },\n  watch: {\n    direction() {\n      //   console.log(this.direction)\n    },\n    flag () {\n        this.$parent.viewportDom = document.querySelector('div[data-power]')\n    }\n  }\n};\n</script>\n\n<style scoped>\n.swiper-item {\n  position: absolute;\n  width: 100%;\n}\n.left-enter-active,\n.left-leave-active,\n.right-enter-active,\n.right-leave-active,\n.onlyleave-leave-active {\n  transition: .3s all ease;\n  position: absolute;\n}\n.left-enter,\n.right-leave-to {\n  transform: translateX(100%);\n  /* left: 100%; */\n}\n.left-leave-to,\n.right-enter,\n.onlyleave-leave-to {\n  transform: translateX(-100%);\n  /* left: -100%; */\n}\n</style>\n","import Swiper from '../components/Swiper.vue'\nimport SwiperItem from '../components/SwiperItem.vue'\n\nSwiper.install = function (Vue) {\n    Vue.component('swiper', Swiper)\n    Vue.component('swiper-item', SwiperItem)\n}\n\nexport default Swiper\n"],"names":["Swiper","install","Vue","component","SwiperItem"],"mappings":";;;;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;EAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCAA,mBAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;EAC5BA,EAAAA,GAAG,CAACC,SAAJ,CAAc,QAAd,EAAwBH,iBAAxB;EACAE,EAAAA,GAAG,CAACC,SAAJ,CAAc,aAAd,EAA6BC,mBAA7B;EACH,CAHD;;;;;;;;"}